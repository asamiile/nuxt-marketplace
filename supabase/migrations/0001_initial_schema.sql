-- 1. Profiles Table
CREATE TABLE profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  username TEXT UNIQUE,
  avatar_url TEXT
);
COMMENT ON TABLE profiles IS 'Stores public profile information for each user.';

-- 2. Products Table
CREATE TABLE products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC NOT NULL CHECK (price >= 0),
  image_url TEXT,
  file_url TEXT,
  creator_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE
);
COMMENT ON TABLE products IS 'Stores information about digital assets available for purchase.';

-- 3. Purchases Table
CREATE TABLE purchases (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  product_id BIGINT NOT NULL REFERENCES products(id) ON DELETE RESTRICT,
  UNIQUE(user_id, product_id)
);
COMMENT ON TABLE purchases IS 'Records which user has purchased which product.';

-- 4. Set up Row Level Security (RLS)
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE purchases ENABLE ROW LEVEL SECURITY;

-- 5. RLS Policies for Profiles
CREATE POLICY "Users can view their own profile." ON profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can insert their own profile." ON profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- 6. RLS Policies for Products
CREATE POLICY "Products are publicly viewable." ON products FOR SELECT USING (true);
CREATE POLICY "Authenticated users can create products." ON products FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Creators can update their own products." ON products FOR UPDATE USING (auth.uid() = creator_id) WITH CHECK (auth.uid() = creator_id);
CREATE POLICY "Creators can delete their own products." ON products FOR DELETE USING (auth.uid() = creator_id);

-- 7. RLS Policies for Purchases
CREATE POLICY "Users can view their own purchases." ON purchases FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create their own purchases." ON purchases FOR INSERT WITH CHECK (auth.uid() = user_id);

-- 8. Trigger to create a profile for new users
-- This function is triggered when a new user signs up in Supabase Auth.
-- It automatically creates a corresponding record in the public.profiles table.
CREATE OR REPLACE FUNCTION public.create_profile_for_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, username, avatar_url)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'username', -- Use the username from metadata passed on signup
    new.raw_user_meta_data->>'avatar_url'  -- Use the avatar_url from metadata if available
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- The trigger that calls the function
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.create_profile_for_new_user();

COMMENT ON FUNCTION public.create_profile_for_new_user() IS 'Automatically creates a user profile upon new user registration using metadata from the signup.';
