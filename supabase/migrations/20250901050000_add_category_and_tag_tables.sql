-- 1. Create Categories Table
CREATE TABLE categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE categories IS 'Stores product categories.';

-- 2. Create Tags Table
CREATE TABLE tags (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE tags IS 'Stores tags for products.';

-- 3. Update Products Table
ALTER TABLE public.products
ADD COLUMN category_id BIGINT REFERENCES categories(id) ON DELETE SET NULL;
COMMENT ON COLUMN public.products.category_id IS 'Reference to the category of the product.';

-- 4. Create Product-Tags Junction Table
CREATE TABLE product_tags (
  product_id BIGINT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  tag_id BIGINT NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  PRIMARY KEY (product_id, tag_id)
);
COMMENT ON TABLE product_tags IS 'Junction table for many-to-many relationship between products and tags.';

-- 5. Set up Row Level Security (RLS)
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE product_tags ENABLE ROW LEVEL SECURITY;

-- 6. RLS Policies
-- Categories: Publicly viewable, but only authenticated users can create/edit them.
CREATE POLICY "Categories are publicly viewable."
ON categories FOR SELECT
USING (true);

CREATE POLICY "Authenticated users can insert categories."
ON categories FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can update categories."
ON categories FOR UPDATE
USING (auth.role() = 'authenticated');

-- Tags: Publicly viewable, but only authenticated users can create/edit them.
CREATE POLICY "Tags are publicly viewable."
ON tags FOR SELECT
USING (true);

CREATE POLICY "Authenticated users can insert tags."
ON tags FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can update tags."
ON tags FOR UPDATE
USING (auth.role() = 'authenticated');


-- Product_Tags: Viewable by everyone, but only the product creator can manage them.
CREATE POLICY "Product tags are publicly viewable."
ON product_tags FOR SELECT
USING (true);

-- This policy is a bit more complex. We need to check if the user trying to insert/update/delete
-- the tag relationship is the creator of the product.
-- We can do this by checking the `creator_id` on the `products` table.

CREATE POLICY "Creators can manage tags for their own products."
ON product_tags FOR ALL
USING (
  (SELECT creator_id FROM products WHERE id = product_id) = auth.uid()
)
WITH CHECK (
  (SELECT creator_id FROM products WHERE id = product_id) = auth.uid()
);
