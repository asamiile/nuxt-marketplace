-- =========== テーブル作成 ===========

-- 1. Profiles Table
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  username TEXT UNIQUE,
  avatar_url TEXT
);

-- 2. Products Table
CREATE TABLE IF NOT EXISTS public.products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC NOT NULL CHECK (price >= 0),
  image_url TEXT,
  file_url TEXT,
  creator_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- 3. Purchases Table
CREATE TABLE IF NOT EXISTS public.purchases (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  product_id BIGINT NOT NULL REFERENCES public.products(id) ON DELETE RESTRICT,
  UNIQUE(user_id, product_id)
);

-- 4. Favorites Table
CREATE TABLE IF NOT EXISTS favorites (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  product_id BIGINT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  UNIQUE(user_id, product_id)
);

-- 5. Categories Table
CREATE TABLE IF NOT EXISTS public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 6. Tags Table
CREATE TABLE IF NOT EXISTS public.tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 7. Product_Tags Junction Table
CREATE TABLE IF NOT EXISTS public.product_tags (
    product_id BIGINT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE,
    tag_id BIGINT NOT NULL REFERENCES public.tags(id) ON DELETE CASCADE,
    PRIMARY KEY (product_id, tag_id)
);

-- 8. Contacts Table
CREATE TABLE IF NOT EXISTS public.contacts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  name TEXT,
  email TEXT,
  subject TEXT,
  message TEXT,
  is_read BOOLEAN DEFAULT false
);

-- =========== カラム追加 ===========

-- Profiles Table
ALTER TABLE public.profiles
  ADD COLUMN IF NOT EXISTS bio TEXT,
  ADD COLUMN IF NOT EXISTS website_url TEXT,
  ADD COLUMN IF NOT EXISTS x_url TEXT,
  ADD COLUMN IF NOT EXISTS youtube_url TEXT;

-- Products Table
ALTER TABLE public.products
  ADD COLUMN IF NOT EXISTS license_type TEXT,
  ADD COLUMN IF NOT EXISTS terms_of_use TEXT,
  ADD COLUMN IF NOT EXISTS category_id BIGINT REFERENCES public.categories(id);


-- =========== RLSヘルパー関数定義 (ポリシーより先に定義) ===========

/**
* RLS HELPER FUNCTIONS
* - These functions are used by RLS policies to check user claims.
*/
create or replace function get_my_claim(claim TEXT) returns jsonb as $$
  select nullif(current_setting('request.jwt.claims', true), '')::jsonb -> claim
$$ language sql stable;

create or replace function is_claims_admin() returns boolean as $$
  select coalesce(get_my_claim('claims_admin')::boolean, false)
$$ language sql stable;


-- =========== RLS有効化 ===========

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.purchases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.favorites ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contacts ENABLE ROW LEVEL SECURITY;


-- =========== RLSポリシー作成 ===========

-- Profiles Policies
DROP POLICY IF EXISTS "Users can view their own profile." ON public.profiles;
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Anyone can view all profiles." ON profiles;
CREATE POLICY "Anyone can view all profiles." ON profiles FOR SELECT USING (true);


-- Products Policies
DROP POLICY IF EXISTS "Products are publicly viewable." ON public.products;
CREATE POLICY "Products are publicly viewable." ON public.products FOR SELECT USING (true);

DROP POLICY IF EXISTS "Authenticated users can create products." ON public.products;
CREATE POLICY "Authenticated users can create products." ON public.products FOR INSERT WITH CHECK (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Creators can update their own products." ON public.products;
CREATE POLICY "Creators can update their own products." ON public.products FOR UPDATE USING (auth.uid() = creator_id) WITH CHECK (auth.uid() = creator_id);

DROP POLICY IF EXISTS "Creators can delete their own products." ON public.products;
CREATE POLICY "Creators can delete their own products." ON public.products FOR DELETE USING (auth.uid() = creator_id);


-- Purchases Policies
DROP POLICY IF EXISTS "Users can view their own purchases." ON public.purchases;
CREATE POLICY "Users can view their own purchases." ON public.purchases FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can create their own purchases." ON public.purchases;
CREATE POLICY "Users can create their own purchases." ON public.purchases FOR INSERT WITH CHECK (auth.uid() = user_id);


-- Favorites Policies
DROP POLICY IF EXISTS "Users can view their own favorites." ON favorites;
CREATE POLICY "Users can view their own favorites." ON favorites FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own favorites." ON favorites;
CREATE POLICY "Users can insert their own favorites." ON favorites FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own favorites." ON favorites;
CREATE POLICY "Users can delete their own favorites." ON favorites FOR DELETE USING (auth.uid() = user_id);


-- Categories Policies
DROP POLICY IF EXISTS "Admin full access on categories" ON public.categories;
CREATE POLICY "Admin full access on categories" ON public.categories FOR ALL USING (public.is_claims_admin()) WITH CHECK (public.is_claims_admin());

DROP POLICY IF EXISTS "Public can read categories" ON public.categories;
CREATE POLICY "Public can read categories" ON public.categories FOR SELECT USING (true);


-- Tags Policies
DROP POLICY IF EXISTS "Public can read tags" ON public.tags;
CREATE POLICY "Public can read tags" ON public.tags FOR SELECT USING (true);

DROP POLICY IF EXISTS "Authenticated users can insert tags" ON public.tags;
CREATE POLICY "Authenticated users can insert tags" ON public.tags FOR INSERT WITH CHECK (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Admins can update tags" ON public.tags;
CREATE POLICY "Admins can update tags" ON public.tags FOR UPDATE USING (public.is_claims_admin()) WITH CHECK (public.is_claims_admin());

DROP POLICY IF EXISTS "Admins can delete tags" ON public.tags;
CREATE POLICY "Admins can delete tags" ON public.tags FOR DELETE USING (public.is_claims_admin());


-- Contacts Policies
DROP POLICY IF EXISTS "Allow admin full access to contacts" ON public.contacts;
CREATE POLICY "Allow admin full access to contacts" ON public.contacts FOR ALL USING (public.is_claims_admin()) WITH CHECK (public.is_claims_admin());


-- =========== データベース関数定義 ===========

-- Trigger function for new user profiles
CREATE OR REPLACE FUNCTION public.create_profile_for_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, username)
  VALUES (new.id, new.raw_user_meta_data->>'username');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- Sales history function
CREATE OR REPLACE FUNCTION public.get_sales_history()
RETURNS TABLE (
  product_id BIGINT,
  product_name TEXT,
  price NUMERIC,
  purchased_at TIMESTAMPTZ,
  purchaser_username TEXT
)
LANGUAGE plpgsql STABLE SECURITY DEFINER AS $$
BEGIN
  RETURN QUERY
  SELECT
    p.id,
    p.name,
    p.price,
    pu.created_at,
    purchaser_profile.username
  FROM
    public.purchases pu
  JOIN
    public.products p ON pu.product_id = p.id
  JOIN
    public.profiles purchaser_profile ON pu.user_id = purchaser_profile.id
  WHERE
    p.creator_id = auth.uid()
  ORDER BY
    pu.created_at DESC;
END;
$$;

-- User management functions
create or replace function get_all_users()
returns table (
  id uuid,
  email text,
  created_at timestamptz,
  last_sign_in_at timestamptz,
  is_admin boolean
) as $$
begin
  if not is_claims_admin() then
    raise exception 'Admin privileges required';
  end if;
  return query
  select
    u.id,
    u.email,
    u.created_at,
    u.last_sign_in_at,
    coalesce((u.raw_user_meta_data->>'claims_admin')::boolean, false) as is_admin
  from auth.users u
  order by u.created_at desc;
end;
$$ language plpgsql security definer;

create or replace function set_admin_status(user_id uuid, p_is_admin boolean)
returns void as $$
begin
  if not is_claims_admin() then
    raise exception 'Admin privileges required';
  end if;
  update auth.users
  set raw_app_meta_data = raw_app_meta_data || jsonb_build_object('claims_admin', p_is_admin)
  where id = user_id;
end;
$$ language plpgsql security definer;


-- =========== トリガー設定 ===========

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.create_profile_for_new_user();


-- =========== ストレージ設定 ===========

-- 1. Create Storage Bucket
INSERT INTO
  storage.buckets (id, name, public)
VALUES
  ('assets', 'assets', true) ON CONFLICT (id) DO NOTHING;

-- 2. RLS Policies for Storage
DROP POLICY IF EXISTS "Public read access for assets" ON storage.objects;
CREATE POLICY "Public read access for assets" ON storage.objects FOR SELECT USING (bucket_id = 'assets');

DROP POLICY IF EXISTS "Authenticated users can upload assets" ON storage.objects;
CREATE POLICY "Authenticated users can upload assets" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'assets');

DROP POLICY IF EXISTS "Users can update their own assets" ON storage.objects;
CREATE POLICY "Users can update their own assets" ON storage.objects FOR UPDATE TO authenticated USING (auth.uid() = owner) WITH CHECK (bucket_id = 'assets');

DROP POLICY IF EXISTS "Users can delete their own assets" ON storage.objects;
CREATE POLICY "Users can delete their own assets" ON storage.objects FOR DELETE TO authenticated USING (auth.uid() = owner);


-- =========== コメント追加 ===========

COMMENT ON FUNCTION public.create_profile_for_new_user() IS 'Automatically creates a user profile upon new user registration in auth.users.';
COMMENT ON TABLE public.categories IS 'Stores product categories.';
COMMENT ON TABLE public.tags IS 'Stores product tags.';
COMMENT ON TABLE public.product_tags IS 'Associates products with tags.';
COMMENT ON COLUMN profiles.bio IS 'A short biography or description of the creator.';
COMMENT ON COLUMN profiles.website_url IS 'Link to the creator''s personal or professional website.';
COMMENT ON COLUMN profiles.x_url IS 'Link to the creator''s X (formerly Twitter) profile.';
COMMENT ON COLUMN profiles.youtube_url IS 'Link to the creator''s YouTube channel.';
COMMENT ON COLUMN public.products.license_type IS 'The type of license for the product (e.g., "Standard License", "Extended License").';
COMMENT ON COLUMN public.products.terms_of_use IS 'The detailed terms of use for the product.';
COMMENT ON TABLE public.contacts IS 'Stores contact form submissions.';
COMMENT ON COLUMN public.contacts.is_read IS 'Indicates if the contact message has been read by an admin.';

-- =========== カラム追加 (is_public) ===========
ALTER TABLE public.categories
ADD COLUMN is_public BOOLEAN DEFAULT true;

ALTER TABLE public.tags
ADD COLUMN is_public BOOLEAN DEFAULT true;